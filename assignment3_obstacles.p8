pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
--main--

function _init()
	custom_palette()
	player_init()

end


function _draw()
	cls()
	map(0, 0)
	player_draw()
	obstacle_draw()
	particles_draw()

	r_draw()
end


function _update()
	player_update()
	player_anim()
	obstacle_update()
	particles_update()
	
	r_update()
end
-->8
--player movement--

anims = {
	idle = {
		w=1, 
		h=2,
		frames={1, 2},
		speed = 0.5
	},
	walking = {
		w=1, 
		h=2, 
		frames = {7, 14},
		speed = 0.07
		},
	running = {
		w=2, 
		h=2, 
		frames = {32, 46},
		speed = 0.5
	},
	crouching = {
		w=1, 
		h=2, 
		frames = {5},
		speed = 0.5
	},
	climbing = {
		w=1, 
		h=2, 
		frames = {64, 69},
		speed = 0.2
	},
	climbing_idle = {
		w = 1,
		h = 2,
		frames = {65},
		speed = 0.5
	},
	grappling = {
		w=1, 
		h=2, 
		frames = {15},
		speed = 0.5
	}, 
	falling = {
		w=1, 
		h=2, 
		frames = {3},
		speed = 0.5
	},
	landed = {
	w = 1,
	h = 2,
	frames = {4, 5},
	speed = 0.5
	}
}

states = {
	none,
	idle = {anim = anims.idle, name = "idle"},
	walking = {anim = anims.walking, name = "walking"},
	running = {anim = anims.running, name = "running"},
	crouching = {anim = anims.crouching, name = "crouching"},
	grappling = {anim = anims.grappling, name = "grappling"},
	climbing = {anim = anims.climbing, name = "climbing"},
	climbing_idle = {anim = anims.climbing_idle, name = "climbing_idle"},
	landed = {anim = anims.landed, name = "landed"},
	falling = {anim = anims.falling, name = "falling"} 
}


gravity = 0.3
acceleration = 0.3
friction = 0.9
k_dx = 0

---

function player_init()
	player = {
		sprite = 1,
		x = 59,
		y = 40,
		w = 5,
		h = 16,
		flp = false,
		dx = 0,
		dy = 0,
		max_dy = 1.5,
		acc = 0.7,
		state = states.none,
		anim = anims.idle,
		anim_timing = 0,
		stamina = 100,
		stamina_rate = 1,
		on_floor = false,
		k_timer = 0
	}
end


function player_draw()
	spr(player.sprite, player.x, player.y, 1, 2, player.flp)
end


function player_update()
	--physics--
	--checks block under player
	if (mget(player.x / 8, player.y/8 + 2) <= 130
	and mget(player.x / 8, player.y/8 + 2) >= 128)	
	or player.state == states.idle then
		player.on_floor = true
	else
		player.on_floor = false
	end
	
	--changes dy based on if player is on floor
	if player.on_floor == false then
		player.dy += gravity
	else
		player.dy = 0
	end	
	
	if mget(player.x / 8, player.y/8 + 2) == 130 then
		player.dx *= friction
		if btn(⬅️) then
			if player.dx > -2.5 then
   	player.dx-=player.acc
   end
   player.state=states.walking
   player.flp=true
  elseif btn(➡️) then
  	if player.dx < 2.5 then
   	player.dx+=player.acc
   end
   player.state=states.walking
   player.flp=false
  else
 		player.state = states.idle
 	end
	else
		--controls--
		if btn(➡️) 	
		and  player.state != states.crouching then
			player.dx = 1.5
			player.state = states.walking
			player.on_floor = true
			player.flp = false
		elseif btn(⬅️) 
		and not (player.state == states.crouching) then
			player.dx = -1.5
			player.state = states.walking
			player.on_floor = true
			player.flp = true
		elseif btn(⬇️) 
		and not (player.state == states.walking) 
		and player.on_floor == true then
			player.state = states.crouching
		
		--climbing
		elseif btn(⬆️)
		and (map_collision(player, "left", 1)
		or map_collision(player, "right", 1)) 
		and player.stamina > 0 then
	 	player.dy = -0.5
	 	player.state = states.climbing
		 player.on_floor = false
		elseif btn(⬇️)
		and not map_collision(player, "down", 0)
		and (map_collision(player, "left", 1)
		or map_collision(player, "right", 1)) 
		and player.stamina > 0 then
	 	player.dy = 0.5
	 	player.state = states.climbing
		 player.on_floor = false
		elseif (map_collision(player, "left", 1)
		or map_collision(player, "right", 1))
		and not map_collision(player, "down", 0) 
		and player.stamina > 0 then
			player.dy = 0
			player.state = states.climbing_idle
			player.on_floor = false
		
		--idle
		else
			player.dx = 0
			player.state = states.idle
		end
	end
	
	player.y += player.dy
	
	--stamina--
	if player.state == states.climbing
	and player.stamina > 0 then
		player.stamina -= player.stamina_rate
	elseif player.on_floor == true
	and player.stamina < 100 then	
		player.stamina += player.stamina_rate
	end
	
	if player.stamina == 0 then
		player.state = states.falling
	end
	
	--collision--
	--make sure flag 0 is checked for all platforms
	--check collision up and down
	if player.dy > 0
	and not (player.state == states.climbing) then
		if map_collision(player, "down", 0) 
		and player.on_floor == false then
			player.state = states.landed
			player.on_floor = true
			player.dy = 0
			player.y -= ((player.y + player.h)%8) + 1
		else
			player.on_floor = false
			player.state = states.falling
		end
	end
		
		--grappling/climbing collision
		if player.dy < 0
		and map_collision(player, "up", 0) then
			player.on_floor = false
			player.state = states.grappling
			player.dy = 0
			player.y += (player.y)%8
		end
	
	--check collision left and right
	if player.dx < 0 then
		if map_collision(player, "left", 0) then
			player.dx = 0
		end
	elseif player.dx > 0 then
		if map_collision(player, "right", 0) then
			player.dx = 0
		end
	end
	
	if player.k_timer > 0 then
		player.k_timer -= 1
		player.dx = k_dx
		if player.k_timer <= 0 then
			player.dx = 0
		end
	end
	
	
	player.x += player.dx
end


--controls player animation
function player_anim()
	local anim = player.state.anim
	
	--sets starting frame after state change
	if player.anim != anim then
		player.anim = anim
		player.sprite = player.anim.frames[1]
	else
	
		--single-frame animation
		if #anim.frames == 1 then
			player.sprite = player.anim.frames[1]
		
		--multiple-frame animation
		elseif time() - player.anim_timing > player.anim.speed then
			player.anim_timing = time()
			player.sprite += 1
			if player.sprite > player.anim.frames[2] then
				if player.state == states.landed then
					player.state = states.idle
					player.on_floor = true
				else
					player.sprite = player.anim.frames[1]
				end
			end
		end
	end
end


function player_obstacle_collision(obs)
	player.k_timer = 5
	if player.x >= obs.x then
		k_dx += obs.knockback
	else
		k_dx -= obs.knockback
	end
end

-->8
--collisions--

--flag 0: can stand on
function map_collision(obj, dir, flag)
	--obj = table needs x, y, w, h
	
	local x = obj.x
	local y = obj.y
	local w = obj.w
	local h = obj.h
	
	--creates a collision boundary
	local x1 = 0
	local y1 = 0
	local x2 = 0
	local y2 = 0
	
	--checking collision direction
	if dir == "left" then
		x1 = x - 1
		y1 = y
		x2 = x
		y2 = y + h - 1
	elseif dir == "right" then
		x1 = x + w + 2
		y1 = y
		x2 = x + w + 3
		y2 = y + h - 1
	elseif dir == "up" then
		x1 = x + 1
		y1 = y - 1
		x2 = x + w - 1
		y2 = y
	elseif dir == "down" then
		x1 = x + 2
		y1 = y + h - 3
		x2 = x + w + 1
		y2 = y + h - 2
	end
	
	
	--pixels to tiles
	x1 /= 8 y1 /= 8
	x2 /= 8 y2 /= 8
	
	if fget(mget(x1, y1), flag)
	or fget(mget(x1, y2), flag) 
	or fget(mget(x2, y1), flag) 
	or fget(mget(x2, y2), flag) then
		return true
	else
		return false
	end
end

--checks if two sprites collide
function spr_collision(obj1, obj2)
	local x_1 = obj1.x
	local y_1 = obj1.y
	local h_1 = obj1.h
	local w_1 = obj1.w
	
	local x_2 = obj2.x
	local y_2 = obj2.y
	local h_2 = obj2.h
	local w_2 = obj2.w
	
	if x_1 + w_1 >= x_2
	and x_1 <= x_2 + w_2
	and y_1 <= y_2 + h_2
	and y_1 + h_1 >= y_2 then
		return true
	else
		return false
	end
end
-->8
--obstacles--

stalactite = {
	x = 20,
	y = 10,
	w = 12,
	h = 15,
	dy = gravity,
	dx = 0,
	c = 4,
	sprite = 76,
	tile_w = 2,
	tile_h = 2,
	flp = ceil(rnd(2)),
	knockback = 5,
	dir = "down",
	timer = 20,
	state = "disabled",
	dist_x = ceil(rnd(10)) + 50,
	dist_y = ceil(rnd(20)) + 50,
	grounded = false,
	part_count = 10
	}

boulder = {
	x = 70,
	y = 50,
	w = 32,
	h = 32,
	dy = 0,
	dx = -0.3,
	c = 4,
	sprite = 192,
	tile_w = 4,
	tile_h = 4,
	flp = ceil(rnd(2)),
	knockback = 10,
	dir = "down",
	timer = 20,
	state = "disabled",
	dist_x = ceil(rnd(30)) + 50,
	dist_y = 32,
	grounded = true,
	part_count = 20,
	a = 0,
	speed = -0.3
	}

obstacles = {}



--------

function obstacle_init()
	
end


function obstacle_draw()
	for obs in all(obstacles) do
		spr(obs.sprite, obs.x, obs.y, obs.tile_w, obs.tile_h, obs.flp)
	end
end


function obstacle_update()

	for obs in all(obstacles) do
		if obs.state == "disabled" then
			if ((obs.x - player.x)^2 < obs.dist_x 
			or (player.x - obs.x)^2 > obs.dist_x)
			and ((obs.y - player.y)^2 < obs.dist_y
			or (player.y - obs.y)^2 > obs.dist_y) then
				obs.state = "enabled"
			end
		
		--timer has started 	
		elseif obs.state == "enabled" then
			obs.timer -= 1
			if obs.timer <= 0 then
				obs.state = "moving"
				
				--makes obstacle rotatae
				if obs.dx < 0 then
					add(rotating_sprites, obs)
				end
			end
		
		--moves the obstacle
		elseif obs.state == "moving" then
			if obs.dx < 0 then
				obs.dx -= 0.01
				obs.x += obs.dx
				obs.speed -= 0.05
				if not map_collision(obs, obs.dir, 0) then
					obs.dx = 0
					obs.dy = gravity
					obs.grounded = false
					del(rotating_sprites, obs)
				end
				--limits rotation speed
				if obs.speed > 2 then
					obs.speed = 2
				end
			elseif obs.dy > 0 then
				obs.dy += gravity
				obs.y += obs.dy
			end
		
		--impact
			if map_collision(obs, obs.dir, 0) 
			and obs.grounded == false then
				obs.state = "impact"		
			elseif spr_collision(obs, player) then
				obs.state = "impact"
				player_obstacle_collision(obs)
		 end
		elseif obs.state == "impact" then
			obstacle_impact(obs)
		end
	end
end

function obstacle_impact(obs)
	spawn_particles(obs)
	del(obstacles, obs)
end
-->8
--particle system--

parts = {}

function particles_draw()
	for p in all(parts) do
		rectfill(p.x, p.y, p.x + 1, p.y + 1, p.c)
	end
end

function particles_update()
	for p in all(parts) do
		p.x += p.dx
		p.y += p.dy
		p.dy += gravity
		p.timer -= 1
		if p.timer <= 0 then
			del(parts, p)
		end
	end
end

function spawn_particles(obs)
	for i = 1, obs.part_count do
		add(parts, {
			x = obs.x + (rnd(20) - 5),
			y = obs.y + obs.h-10,
			w = 1;
			h = 1,
			c = obs.c,
			dx = rnd(5) - 2,
			dy = rnd(3) - 2,
			timer = flr(rnd(7) + 5)
		})
	end
end
-->8
--sprite rotation--
rotating_sprites = {}

function r_draw()
	for sprt in all(rotating_sprites) do
		spr_r(sprt.sprite, sprt.x, sprt.y, sprt.a, sprt.tile_w, sprt.tile_h)
	end
end

function r_update()
	for sprt in all(rotating_sprites) do
		sprt.a += sprt.speed
		sprt.a = sprt.a%360
	end
end
--[[
s = sprite
x = center x
y = center y
a = angle 
w = width
h = height
--]]
-- s = sprite index (top-left tile)
-- x,y = destination top-left (keeps same semantics as your code)
-- a = angle in degrees (kept like your original: code divides by 360)
-- w,h = sprite size in tiles (defaults to 1)
function spr_r(s, x, y, a, w, h)
 w = w or 1
 h = h or 1

 -- clamp/normalize sprite index into 0..255
 s = flr(s) % 256

 local sw, sh = w * 8, h * 8
 local x0, y0 = sw * 0.5, sh * 0.5

 -- keep your angle convention (degrees -> turns)
 local ang = a / 360
 local sa, ca = sin(ang), cos(ang)

 for ix = 0, sw - 1 do
  for iy = 0, sh - 1 do
   local dx = ix - x0
   local dy = iy - y0

   -- rotated coordinates inside the sprite block
   local xx = flr(dx * ca - dy * sa + x0)
   local yy = flr(dx * sa + dy * ca + y0)

   if xx >= 0 and xx < sw and yy >= 0 and yy < sh then
    -- which 8x8 tile inside the block is this pixel in?
    local tile_col = flr(xx / 8)
    local tile_row = flr(yy / 8)
    local px = xx % 8
    local py = yy % 8

    -- compute the sheet tile index for that tile (handles spanning rows)
    local tile_index = (s + tile_col + tile_row * 16) % 256

    -- convert tile_index -> sheet pixel coords
    local sx = (tile_index % 16) * 8 + px
    local sy = flr(tile_index / 16) * 8 + py

    local col = sget(sx, sy)
    if col ~= 0 then -- optional: skip transparent pixels
     pset(x + ix, y + iy, col)
    end
   end
  end
 end
end

-->8

-->8

-->8

-->8
--colors--

--fuschia (2) --> brownish gray (134)
--red (8) --> reddish brown (132)
--purple (13) --> purplish brown (133)
--pink (14) --> dark brown (128)

function custom_palette()
	poke(0x5f2e, 1)
	pal( 2, 134, 1)
	pal( 8, 132, 1)
	pal( 13, 133, 1)
	pal( 14, 128, 1)    
end
-->8
--notes--
--[[
* if you move while touching 
		the platform on the first 
		fall, it will cause the 
		player to get stuck in the 
		floor. i'm working on fixing 
		that.
		
* upwards collision has not been
		tested. i will tweak it after
		grappling function has been
		added.
		
* climbing will be added asap,
		i'm currently working on it.
--]]
__gfx__
00000000044000000000000040444000000000000000000000000000000400000000000000000000004400000044000000000000000000000044000000440000
0700007004c4400000440000044c4400000000000000000004400000044c44000044000000440000004c4400004c44000044000000440000004c4400004c4400
007007000444f4000044400000044f40004400000000000004c4400004044f40004c4400004c440000444f4000444f40004c4400004c440004044f4004044f40
00077000044ff000004ff4000004ff00004c4400000000000444f4004004ff0004044f4000444f400044ff000004ff0000444f4000444f400404ff000404ff00
00077000040c0000004ff4000000cc0000444f4000000000044ff0000000c0000404ff000044ff000004c000000040000044ff000044ff004000c0000000c000
0070070000ccc000004c0000000fcf0f0044ff0000000000040cc000000cc0004000c0000040c000000cc000000cc0000004c0000040c000000cc000000cfc00
0700007000fcc00000ccc00000f0ccf00400c0000044000000fccf00000cf000000cc000000cc000000fc000000fc000000cc000000cc000000cf000000ccf00
0000000000fcc00000fcc00000004400000cfc0f004c4400000ffff000fcf000000cf000000fc000000fc00000fcc000000fc000000fc000000cf000000440ff
000000000f04400000fcc0000000111000cccff000444f400000440000f44f00000cf000000fc00000f4400000f44f00000fc000000fc00000f4f00000011000
000000000f011f0000f4400000001111004400000044ff00000011000f0110f000f44f000004f00000f11f000f0110f000f44f000004f00000f11f0000011000
000000000011100000f11f000000101100111000004cc000000111000011110000f11f000001f000000111000011110000f111000001f0000001110000011000
0000000000111100001110000000111000011100000fcf0000011110001111100011111000011100000111000011111000111110000111000001110000110000
000000000110110000111100000017000001110000fccf0000110110011101100011111000111100001110000111011000111110001111000011100000110000
000000000110110001101100000010700011100000f1111000110110110001100111011071101100001700001100011001110110711011000017000000100000
00000000010010000100100000007000070010000111011000100010700000171100010070001000001070007000001711000100700010000010700007100000
000000000770770007707700000070000070770007110077007700770700007d7700077000007700007700000700007077000770000077000077000000700000
00000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000
0000000440000000000040000000000000400440000000000000044c440000000000000440000000000040000000000000400440000000000000044c44000000
00000440c44000000000400400000000000444c440000000000004044f40000000000440c44000000000400400000000000444c440000000000004044f400000
0000400044f400000000044c4400000000000044f400000000004004ff0000000000400044f400000000044c4400000000000044f400000000004004ff000000
000000004ff00000000000044f4000000000004ff000000000000000c0000000000000004ff00000000000044f4000000000004ff000000000000000c0000000
000000000c00000000000004ff0000000000000c00000000000000ffc0f00000000000000c00000000000004ff0000000000000c00000000000000fcf0f00000
00000000cf00000000000000c0000000000000fc00000000000000fccf00000000000000fc00000000000000c0000000000000cf00000000000000fccf000000
0000000fccff00000000000fc000000000000fccff00000000000004400000000000000fccff00000000000fc000000000000fccff0000000000000440000000
000000f0440000000000000fc000000000000f44000000000000000111000000000000f0440000000000000fc000000000000f44000000000000000111000000
000077001100000000000004ff00000000000011000000000000001111107000000077001100000000000000ff00000000000011000000000000001111107000
00000101111000000000000111000000000001111000000000071111001170000000010111100000000000011100000000000111100000000007111100117000
00000111111100000000000111000000000001111100000000070110000000000000011111110000000000011100000000000111110000000007011000000000
00000011001100000000007110000000000011101100000000000000000000000000001100110000000000711000000000001110110000000000000000000000
00000000000110000000007110000000000110007700000000000000000000000000000000011000000000711000000000011000770000000000000000000000
00000000000017000000000100000000000700000000000000000000000000000000000000001700000000010000000000070000000000000000000000000000
00000000000070000000000770000000000070000000000000000000000000000000000000007000000000077000000000007000000000000000000000000000
00444000000000000000000000444000000000000000000000000000000000000000000000000000000000000000000000444444444444000044444444c44400
044c44000044000000000000044c4400004400000000000000000000000000000000000000000000000000000000000000444444444444000044444444c44400
40044f40004c44000004400040044f40004c44000044000000000000000000000000000000000000000000000000000000444444444444000044444444c44400
0004ff0f00444f400004c4400004ff0f00444f40004c4400000000000000000000000000000000000000000000000000000eeee88888e000000eeee88818e000
0000ccf00044ff0f000444f40000ccf00044ff0000444f4000000000000000000000000000000000000000000000000000088884444480000008888444c48000
0000cf0f0400c0f000044ff00000cf000400c0f00044ff0f00000000000000000000000000000000000000000000000000044444444440000004444444c44000
0000ccf0000cfc0f00400cf00000ccff000cff000400cff00000000000000000000000000000000000000000000000000000e888eeee00000000e888ee1e0000
0000440000cccff00000cf0f0000440000cccf0f000cf00f00000000000000000000000000000000000000000000000000008444888800000000844481180000
0000111000440000000cccf000001111004400f000cccff000000000000000000000000000000000000000000000000000000ee888e0000000000ee881e00000
00001111001111000004400000001111001110000044000000000000000000000000000000000000000000000000000000000884448000000000088411800000
000010110001111000011100000011170001110000111000000000000000000000000000000000000000000000000000000000e88e000000000000e81e000000
00001110000111070000110700000110000111770001110700000000000000000000000000000000000000000000000000000084480000000000008418000000
000017000001107000001170000001100001100000011170000000000000000000000000000000000000000000000000000000444400000000000044c4000000
00001070000010000000010700000010000010000001100000000000000000000000000000000000000000000000000000000008e000000000000008c0000000
000077000000770000000070000000770000770000001700000000000000000000000000000000000000000000000000000000088000000000000008c0000000
00000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222111111113333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000088800000000000000000000000000000444000000000000000000000000000002220000000000000000000000000000055500000000000000000
00000000088844448e0888000000000000000000044444448e844400000000000000000002222222252222000000000000000000055522255555550000000000
00000008844444448e8444888000000000000004444444448e844444400000000000000222222222252222222000000000000005522222222522225550000000
00000084444444448e8444444800000000000044444444448e844444440000000000002222222222252222222200000000000052222222222522222225000000
00000844444444448e8444444480000000000444444444448e844444444000000000022222222222252222222220000000000522222222222522222222500000
0000084444444448ee844444444800000000044444444448ee844444444400000000022222222222552222222222000000000522222222225522222222250000
0000844444444448e8444444444480000000444444444448e8444444444440000000222222222222522222222222200000005222222222225222222222225000
000088444444448ee844444444444800000088444444448ee8444444444444000000222222222225522222222222220000005222222222255222222222225000
0088ee844444448ee8444444444448000048ee844444448ee8444444444448000022552222222225522222222222220000055522222222255222222222225000
08448ee8844488eeee88444444488e0004448ee8844488eeee88444444488e000222255222222255552222222222250000522552222222555522222222225000
0844488ee888eee88eee8844488ee0000444488ee888eee88eee8844488ee0000222222552225552255522222225500005222225522255522555222222255000
08444448eeee888448eeee888eee880004444448eeee888448eeee888eee88000222222255552222225555222555220005222222555522222255552225552500
84444448ee88444444888eeeee88448044444448ee88444444888eeeee8844402222222255222222222225555522222052222222552222222222255555222250
84444448e8444444444448eee844444844444448e8444444444448eee84444442222222252222222222222555222222252222222522222222222225552222225
84444448e8444444444448ee8444444844444448e8444444444448ee844444442222222252222222222222552222222252222222522222222222225522222225
84444448e8444444444448ee8444444844444448e8444444444448ee844444442222222252222222222222552222222252222222522222222222225522222225
84444448e84444444444448e8444444844444448e84444444444448e844444442222222252222222222222252222222252222222522222222222222522222225
8444448ee84444444444448e844444484444448ee84444444444448e844444442222222552222222222222252222222252222225522222222222222522222225
084488eee88444444444448e84444448044488eee88444444444448e844444440222225552222222222222252222222205222255522222222222222522222225
0848eeeeeee88444444448ee844444480448eeeeeee88444444448ee844444440222555555522222222222552222222205225555555222222222225522222225
008eee8888eee88844488eeee8444480008eee8888eee88844488eeee84444400025552222555222222225555222222000555522225552222222255552222250
000888444488eeee888eee88ee844480000888444488eeee888eee88ee8444400002222222225555222555225522222000052222222255552225552255222250
00844444444488eeeeee88448e84448000444444444488eeeeee88448e8444400022222222222255555522222522222000522222222222555555222225222250
008444444444448ee888444448e84800004444444444448ee888444448e844000022222222222225522222222252220000522222222222255222222222522500
008444444444448e8444444448ee8000004444444444448e8444444448ee80000022222222222225222222222255200000522222222222252222222222555000
000844444444448e8444444444800000000444444444448e84444444448000000002222222222225222222222220000000052222222222252222222222500000
00008444444448ee844444444480000000004444444448ee84444444448000000000222222222255222222222220000000005222222222552222222222500000
00000844444448e8444444444800000000000444444448e844444444440000000000022222222252222222222200000000000522222222522222222225000000
00000084444448e8444444444800000000000044444448e844444444440000000000002222222252222222222200000000000052222222522222222225000000
0000000884448e8444444448800000000000000444448e8444444444400000000000000222222522222222222000000000000005522225222222222550000000
00000000088800844444888000000000000000000444808444444440000000000000000002222022222222200000000000000000055550522222555000000000
00000000000000088888000000000000000000000000000844440000000000000000000000000002222200000000000000000000000000055555000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004040000000000000000000000000000040400000000000000000000000000000000000000000000000000000000000000000000
0301090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404
__map__
8080808080808080808080808080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8081595959595981818181818183838000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8082828282828282828181818181818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8080808080808080808080808080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
